from fastapi import FastAPI, HTTPException, Request
from pymongo import MongoClient
from bson import ObjectId
from pydantic import BaseModel
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder

# membuat koneksi ke database MongoDB
client = MongoClient("mongodb://localhost:27017/")
dbMongo = client["XETIA"]
cUser = dbMongo["user"]

# model input untuk operasi create dan update mongoDB
class UserModel(BaseModel):
    nama: str
    deskripsi: str
    sapaan: str

# model output user mongoDB
class UserOutput(BaseModel):
    id: str
    nama: str
    deskripsi: str
    sapaan: str

app = FastAPI()

# operasi create mongoDB
@app.post("/create/", tags=["mongoDB"])
async def create_item(user: UserModel):
    result = cUser.insert_one(user.dict())
    if result.acknowledged:
        return JSONResponse(content={"status": "created"})
    else:
        raise HTTPException(status_code=500, detail="Failed to create item")

# operasi read all mongoDB
@app.get("/read/", tags=["mongoDB"])
async def read_items():
    users = []
    for user in cUser.find():
        user_output = UserOutput(id=str(user["_id"]), nama=user["nama"], deskripsi=user["deskripsi"], sapaan=user["sapaan"])
        users.append(jsonable_encoder(user_output))
    return JSONResponse(content=users)

# operasi read by id mongoDB
@app.get("/search/{id}", tags=["mongoDB"])
async def read_item(id: str):
    user = cUser.find_one({"_id": ObjectId(id)})
    if user:
        hasil = UserOutput(id=str(user["_id"]), nama=user["nama"], deskripsi=user["deskripsi"], sapaan=user["sapaan"])
        return JSONResponse(content={"hasil": jsonable_encoder(hasil)})
    else:
        raise HTTPException(status_code=404, detail="Item not found")
        
# operasi update mongoDB
@app.put("/update/{id}", tags=["mongoDB"])
async def update_item(id: str, user: UserModel):
    result = cUser.update_one({"_id": ObjectId(id)}, {"$set": user.dict()})
    if result.modified_count == 1:
        return JSONResponse(content={"status": "updated"})
    elif result.matched_count == 1:
        return JSONResponse(content={"status": "no changes"})
    else:
        raise HTTPException(status_code=404, detail="Item not found")

# operasi patch mongoDB
@app.patch("/patch/{id}", tags=["mongoDB"])
async def patch_item(id: str, user: UserModel):
    result = cUser.update_one({"_id": ObjectId(id)}, {"$set": user.dict()})
    if result.modified_count == 1:
        return JSONResponse(content={"status": "patched"})
    elif result.matched_count == 1:
        return JSONResponse(content={"status": "no changes"})
    else:
        raise HTTPException(status_code=404, detail="Item not found")

# operasi delete mongoDB
@app.delete("/delete/{id}", tags=["mongoDB"])
async def delete_item(id: str):
    result = cUser.delete_one({"_id": ObjectId(id)})
    if result.deleted_count == 1:
        return JSONResponse(content={"hasil": "berhasil terhapus"})
    else:
        raise HTTPException(status_code=404, detail="Item not found")

# checking server error
@app.exception_handler(Exception)
async def value_error_exception_handler(request: Request, exc: Exception):
    return JSONResponse(
        status_code=500,
        content={"message": str(exc)},
    )